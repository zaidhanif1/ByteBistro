"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TogetherTextToImageTask = exports.TogetherTextGenerationTask = exports.TogetherConversationalTask = void 0;
const InferenceOutputError_js_1 = require("../lib/InferenceOutputError.js");
const omit_js_1 = require("../utils/omit.js");
const providerHelper_js_1 = require("./providerHelper.js");
const TOGETHER_API_BASE_URL = "https://api.together.xyz";
class TogetherConversationalTask extends providerHelper_js_1.BaseConversationalTask {
    constructor() {
        super("together", TOGETHER_API_BASE_URL);
    }
}
exports.TogetherConversationalTask = TogetherConversationalTask;
class TogetherTextGenerationTask extends providerHelper_js_1.BaseTextGenerationTask {
    constructor() {
        super("together", TOGETHER_API_BASE_URL);
    }
    preparePayload(params) {
        return {
            model: params.model,
            ...params.args,
            prompt: params.args.inputs,
        };
    }
    async getResponse(response) {
        if (typeof response === "object" &&
            "choices" in response &&
            Array.isArray(response?.choices) &&
            typeof response?.model === "string") {
            const completion = response.choices[0];
            return {
                generated_text: completion.text,
            };
        }
        throw new InferenceOutputError_js_1.InferenceOutputError("Expected Together text generation response format");
    }
}
exports.TogetherTextGenerationTask = TogetherTextGenerationTask;
class TogetherTextToImageTask extends providerHelper_js_1.TaskProviderHelper {
    constructor() {
        super("together", TOGETHER_API_BASE_URL);
    }
    makeRoute() {
        return "v1/images/generations";
    }
    preparePayload(params) {
        return {
            ...(0, omit_js_1.omit)(params.args, ["inputs", "parameters"]),
            ...params.args.parameters,
            prompt: params.args.inputs,
            response_format: "base64",
            model: params.model,
        };
    }
    async getResponse(response, outputType) {
        if (typeof response === "object" &&
            "data" in response &&
            Array.isArray(response.data) &&
            response.data.length > 0 &&
            "b64_json" in response.data[0] &&
            typeof response.data[0].b64_json === "string") {
            const base64Data = response.data[0].b64_json;
            if (outputType === "url") {
                return `data:image/jpeg;base64,${base64Data}`;
            }
            return fetch(`data:image/jpeg;base64,${base64Data}`).then((res) => res.blob());
        }
        throw new InferenceOutputError_js_1.InferenceOutputError("Expected Together text-to-image response format");
    }
}
exports.TogetherTextToImageTask = TogetherTextToImageTask;
